# Do not edit this file! It has been generated by .github/gen-workflow-ci.py

name: CI

on:
  schedule:
    # run a build on master (this does not publish test results or cancel concurrent builds)
    - cron: '0 10 * * *' # everyday at 10am
  push:
    # only consider push to master, hotfix-branches, and tags
    # otherwise modify job.config.outputs.push
    branches: [ 'master', 'hotfix-*' ]
    tags: [ 'v*.*.*' ]
  pull_request:
    # only consider pull requests into master
    branches: [ master ]
  workflow_dispatch:

permissions: {}

concurrency:
  # This controls which concurrent builds to cancel:
  # - we do not want any concurrent builds on a branch (pull_request)
  # - we do not want concurrent builds on the same commit on master (push)
  # - we do not want concurrent builds on the same commit on a tag (push)
  # - we allow concurrent runs on the same commit on master and its tag (push)
  # - we allow concurrent runs on the same commit on master (push) and a scheduled build (schedule)
  #
  # A pull_request event only runs on branch commit, a push event only on master and tag commit.
  # A schedule event only runs on master HEAD commit.
  #
  # Expression github.ref means something like refs/heads/master or refs/tags/v0.22.1 or the branch.
  # This helps to not cancel concurrent runs on master or a tag that share the same commit.
  # Expression github.head_ref refers to the branch of the pull request.
  # On master, github.head_ref is empty, so we use the SHA of the commit, this means individual
  # commits to master will not be cancelled, while there can only be one concurrent build on a branch.
  #
  # We include the event name to we allow for concurrent scheduled and master builds.
  group: ci-${{ github.event_name }}-${{ github.ref }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: Event File
        path: ${{ github.event_path }}

  setup-py:
    name: "setup.py"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Test setup.py
        env:
          HOROVOD_WITHOUT_TENSORFLOW: 1
          HOROVOD_WITHOUT_PYTORCH: 1
          HOROVOD_WITHOUT_MXNET: 1
          HOROVOD_WITHOUT_GLOO: 1
          HOROVOD_WITHOUT_MPI: 1
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel
          python setup.py sdist
          pip -v install dist/horovod-*.tar.gz

  init-workflow:
    name: "Init Workflow"
    runs-on: ubuntu-latest
    outputs:
      run-at-all: ${{ github.event_name != 'schedule' || github.repository == 'horovod/horovod' }}
      # if we don't get a clear 'false', we fall back to building and testing
      run-builds-and-tests: ${{ steps.tests.outputs.needed != 'false' }}
      buildkite-branch-label: "${{ steps.config-buildkite.outputs.branch-label }}"
      buildkite-message: "${{ steps.config-buildkite.outputs.message }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Pip install dependencies
        run: pip install -r .github/requirements.txt

      - name: Check ci.yaml is up-to-date
        run: |
          python .github/gen-workflow-ci.py
          if [[ $(git diff .github/workflows/ci.yaml | wc -l) -gt 0 ]]
          then
            echo "::error::Workflow file .github/workflows/ci.yaml is out-dated, please run .github/gen-workflow-ci.py and commit changes"
            exit 1
          fi
        shell: bash

      - name: Check if tests are needed
        id: tests
        env:
          GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            changes="$(python .github/get-changed-code-files.py)"
            if [[ -z "$changes" ]]
            then
              echo "No code changes, no need to build and test"
              echo "needed=false" >> $GITHUB_OUTPUT
            else
              echo "Code changes, we need to build and test:"
              echo "$changes"
              echo "needed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "This is not part of a pull request, we need to build and test"
            echo "needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Configure Buildkite Build
        id: config-buildkite
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch="${{ github.event.pull_request.head.ref || github.ref }}"
          branch="${branch#"refs/heads/"}"
          branch="${branch#"refs/tags/"}"

          branch_label="${branch}"
          if [[ "${{ github.event_name }}" == "schedule" ]]
          then
            # we add this label to the branch used by Buildkite to avoid it cancelling one of concurrent schedule and push builds on master
            branch_label="${branch} (schedule)"
          fi
          echo "branch-label=${branch_label}" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            head_sha="${{ github.event.pull_request.head.sha }}"
            message="$(gh api https://api.github.com/repos/horovod/horovod/commits/${head_sha} -q .commit.message | head -n1)"
            echo "message=${message}" >> $GITHUB_OUTPUT
          fi

      - name: Provide PR meta
        if: github.event_name == 'pull_request'
        run: |
          rm -f pr.json
          echo -n "{" >> pr.json
          echo -n " \"merge_sha\": \"${{ github.sha }}\"," >> pr.json
          echo -n " \"base_sha\": \"${{ github.event.pull_request.base.sha }}\"," >> pr.json
          echo -n " \"head_sha\": \"${{ github.event.pull_request.head.sha }}\" " >> pr.json
          echo -n "}" >> pr.json
          cat pr.json

      - name: Upload PR meta
        uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request'
        with:
          name: PR Meta
          path: pr.json


  build-and-test-macos:
    name: "Build and Test macOS (${{ matrix.image }}-macos)"
    needs: [init-workflow]
    if: >
      needs.init-workflow.outputs.run-at-all == 'true' &&
      needs.init-workflow.outputs.run-builds-and-tests == 'true'
    runs-on: macos-latest

    strategy:
      max-parallel: 3
      fail-fast: false
      matrix:
        include:
          - image: test-cpu-openmpi-py3_7-tf1_15_5-keras2_2_4-torch1_6_0-mxnet1_5_1_p0
            HOROVOD_WITH_MPI: 1
            HOROVOD_WITHOUT_GLOO: 1
            TENSORFLOW: 1.15.0
            KERAS: 2.2.4
            PYTORCH: 1.6.0
            PYTORCH_LIGHTNING: 1.3.8
            TORCHVISION: 0.7.0
            MXNET: 1.5.1.post0

          - image: test-cpu-gloo-py3_8-tf2_9_2-keras2_9_0-torch1_11_0-mxnet1_7_0_p2
            HOROVOD_WITHOUT_MPI: 1
            HOROVOD_WITH_GLOO: 1
            TENSORFLOW: 2.9.2
            KERAS: 2.9.0
            PYTORCH: 1.11.0
            PYTORCH_LIGHTNING: 1.5.9
            TORCHVISION: 0.12.0
            MXNET: 1.7.0.post2

          - image: test-openmpi-cpu-gloo-py3_8-tf2_10_0-keras2_10_0-torch1_12_1-mxnet1_9_1
            HOROVOD_WITH_MPI: 1
            HOROVOD_WITH_GLOO: 1
            TENSORFLOW: 2.10.0
            KERAS: 2.10.0
            PYTORCH: 1.12.1
            PYTORCH_LIGHTNING: 1.5.9
            TORCHVISION: 0.13.1
            MXNET: 1.9.1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build
        id: build
        env:
          HOROVOD_WITH_MPI: ${{ matrix.HOROVOD_WITH_MPI }}
          HOROVOD_WITHOUT_MPI: ${{ matrix.HOROVOD_WITHOUT_MPI }}
          HOROVOD_WITH_GLOO: ${{ matrix.HOROVOD_WITH_GLOO }}
          HOROVOD_WITHOUT_GLOO: ${{ matrix.HOROVOD_WITHOUT_GLOO }}
          TENSORFLOW: ${{ matrix.TENSORFLOW }}
          KERAS: ${{ matrix.KERAS }}
          PYTORCH: ${{ matrix.PYTORCH }}
          PYTORCH_LIGHTNING: ${{ matrix.PYTORCH_LIGHTNING }}
          TORCHVISION: ${{ matrix.TORCHVISION }}
          MXNET: ${{ matrix.MXNET }}

        # The python patch in the pyenv install step is to work around an incompatibility introduced in new xcode version in macOS Big Sur. The patch is provided by python team.
        # The original discussion is here https://github.com/pyenv/pyenv/issues/1737
        run: |
          brew reinstall -f zlib bzip2
          brew install -f openmpi cmake libuv pyenv coreutils curl
          export PATH=$(pyenv root)/shims:$PATH
          pyenv install 3.7.12
          pyenv global 3.7.12
          python --version

          python -m pip install -U pip
          pip install tensorflow==${TENSORFLOW} keras==${KERAS}
          if [[ ${TENSORFLOW} == 1.* ]] || [[ ${TENSORFLOW} == 2.[012345].* ]]; then pip install "h5py<3" "protobuf~=3.20"; fi
          pip install torch==${PYTORCH} pytorch_lightning==${PYTORCH_LIGHTNING} torchvision==${TORCHVISION}
          pip install mxnet==${MXNET}
          HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir .[test]
          horovodrun --check-build

      - name: Test [attempt 1 of 3]
        id: test-1
        continue-on-error: true
        if: always() && steps.build.outcome == 'success' && true

        run: |
          export PATH=$(pyenv root)/shims:$PATH
          pyenv global 3.7.12
          python --version

          artifacts_path="$(pwd)/artifacts/${{ matrix.image }}-macos-run-1"
          mkdir -p "$artifacts_path"
          echo "artifacts-path=$artifacts_path" >> $GITHUB_OUTPUT
          echo pytest -v --capture=no --continue-on-collection-errors --junit-xml=$artifacts_path/junit.\$1.\${HOROVOD_RANK:-\${OMPI_COMM_WORLD_RANK:-\${PMI_RANK}}}.\$2.xml \${@:2} > pytest.sh
          chmod u+x pytest.sh

          cd test/parallel
          ls test_*.py | gtimeout 10m xargs -n 1 horovodrun -np 2 /bin/bash ../../pytest.sh macos

      - name: Test [attempt 2 of 3]
        id: test-2
        continue-on-error: true
        if: always() && steps.build.outcome == 'success' && steps.test-1.outcome == 'failure'

        run: |
          export PATH=$(pyenv root)/shims:$PATH
          pyenv global 3.7.12
          python --version

          artifacts_path="$(pwd)/artifacts/${{ matrix.image }}-macos-run-2"
          mkdir -p "$artifacts_path"
          echo "artifacts-path=$artifacts_path" >> $GITHUB_OUTPUT
          echo pytest -v --capture=no --continue-on-collection-errors --junit-xml=$artifacts_path/junit.\$1.\${HOROVOD_RANK:-\${OMPI_COMM_WORLD_RANK:-\${PMI_RANK}}}.\$2.xml \${@:2} > pytest.sh
          chmod u+x pytest.sh

          cd test/parallel
          ls test_*.py | gtimeout 10m xargs -n 1 horovodrun -np 2 /bin/bash ../../pytest.sh macos

      - name: Test [attempt 3 of 3]
        id: test-3
        continue-on-error: false
        if: always() && steps.build.outcome == 'success' && steps.test-2.outcome == 'failure'

        run: |
          export PATH=$(pyenv root)/shims:$PATH
          pyenv global 3.7.12
          python --version

          artifacts_path="$(pwd)/artifacts/${{ matrix.image }}-macos-run-3"
          mkdir -p "$artifacts_path"
          echo "artifacts-path=$artifacts_path" >> $GITHUB_OUTPUT
          echo pytest -v --capture=no --continue-on-collection-errors --junit-xml=$artifacts_path/junit.\$1.\${HOROVOD_RANK:-\${OMPI_COMM_WORLD_RANK:-\${PMI_RANK}}}.\$2.xml \${@:2} > pytest.sh
          chmod u+x pytest.sh

          cd test/parallel
          ls test_*.py | gtimeout 10m xargs -n 1 horovodrun -np 2 /bin/bash ../../pytest.sh macos

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Unit Test Results - ${{ matrix.image }}-macos
          path: |
            ${{ steps.test-1.outputs.artifacts-path }}
            ${{ steps.test-2.outputs.artifacts-path }}
            ${{ steps.test-3.outputs.artifacts-path }}
  sync-files:
    name: "Sync Files (${{ matrix.name }})"
    needs: [init-workflow]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Docs Summary
            left_file: README.rst
            right_file: docs/summary.rst
            init: sed -i -e s/docs\///g README.rst

          - name: Examples Keras Spark3
            left_file: examples/spark/keras/keras_spark_rossmann_run.py
            right_file: examples/spark/keras/keras_spark3_rossmann.py

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Diffing ${{ matrix.left_file }} with ${{ matrix.right_file }}
        env:
          LEFT: ${{ matrix.left_file }}
          RIGHT: ${{ matrix.right_file }}
          INIT: ${{ matrix.init }}
        run: |
          $INIT

          patch --quiet -p0 $LEFT ${RIGHT}.patch -o ${LEFT}.expected
          if ! diff -q ${LEFT}.expected --label $LEFT $RIGHT
          then
            echo
            echo "::error::Files are out-of-sync: $LEFT vs. $RIGHT"
            echo "Unexpected differences are:"
            diff ${LEFT}.expected --label $LEFT $RIGHT || true

            echo
            echo "Use the following as ${RIGHT}.patch to accept those changes:"
            diff $LEFT $RIGHT || true

            false
          fi
