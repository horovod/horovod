# Do not edit this file! It has been generated by .github/gen-workflow-ci.py

name: CI

on:
  schedule:
    # run a build on master (this does not publish test results or cancel concurrent builds)
    - cron: '0 10 * * *' # everyday at 10am
  push:
    # only consider push to master and tags
    # otherwise modify job.config.outputs.push
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    # only consider pull requests into master
    branches: [ master ]
  workflow_dispatch:

concurrency:
  # This controls which concurrent builds to cancel:
  # - we do not want any concurrent builds on a branch (pull_request)
  # - we do not want concurrent builds on the same commit on master (push)
  # - we do not want concurrent builds on the same commit on a tag (push)
  # - we allow concurrent runs on the same commit on master and its tag (push)
  # - we allow concurrent runs on the same commit on master (push) and a scheduled build (schedule)
  #
  # A pull_request event only runs on branch commit, a push event only on master and tag commit.
  # A schedule event only runs on master HEAD commit.
  #
  # Expression github.ref means something like refs/heads/master or refs/tags/v0.22.1 or the branch.
  # This helps to not cancel concurrent runs on master or a tag that share the same commit.
  # Expression github.head_ref refers to the branch of the pull request.
  # On master, github.head_ref is empty, so we use the SHA of the commit, this means individual
  # commits to master will not be cancelled, while there can only be one concurrent build on a branch.
  #
  # We include the event name to we allow for concurrent scheduled and master builds.
  group: ci-${{ github.event_name }}-${{ github.ref }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Debug Action
      uses: hmarr/debug-action@v1.0.0
    - name: Debug Concurrency
      run: echo "ci-${{ github.event_name }}-${{ github.ref }}-${{ github.head_ref || github.sha }}"

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}

  init-workflow:
    name: "Init Workflow"
    runs-on: ubuntu-latest
    outputs:
      run-at-all: ${{ github.event_name != 'schedule' || github.repository == 'horovod/horovod' }}
      # if we don't get a clear 'false', we fall back to building and testing
      run-builds-and-tests: ${{ steps.tests.outputs.needed != 'false' }}
      buildkite-branch-label: "${{ steps.config-buildkite.outputs.branch-label }}"
      buildkite-message: "${{ steps.config-buildkite.outputs.message }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Pip install dependencies
        run: pip install -r .github/requirements.txt

      - name: Check ci.yaml is up-to-date
        run: |
          python .github/gen-workflow-ci.py
          if [[ $(git diff .github/workflows/ci.yaml | wc -l) -gt 0 ]]
          then
            echo "::error::Workflow file .github/workflows/ci.yaml is out-dated, please run .github/gen-workflow-ci.py and commit changes"
            exit 1
          fi
        shell: bash

      - name: Check if tests are needed
        id: tests
        env:
          GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            changes="$(python .github/get-changed-code-files.py)"
            if [[ -z "$changes" ]]
            then
              echo "No code changes, no need to build and test"
              echo "::set-output name=needed::false"
            else
              echo "Code changes, we need to build and test:"
              echo "$changes"
              echo "::set-output name=needed::true"
            fi
          else
            echo "This is not part of a pull request, we need to build and test"
            echo "::set-output name=needed::true"
          fi

      - name: Configure Buildkite Build
        id: config-buildkite
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch="${{ github.event.pull_request.head.ref || github.ref }}"
          branch="${branch#"refs/heads/"}"
          branch="${branch#"refs/tags/"}"

          branch_label="${branch}"
          if [[ "${{ github.event_name }}" == "schedule" ]]
          then
            # we add this label to the branch used by Buildkite to avoid it cancelling one of concurrent schedule and push builds on master
            branch_label="${branch} (schedule)"
          fi
          echo "::set-output name=branch-label::${branch_label}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            head_sha="${{ github.event.pull_request.head.sha }}"
            message="$(gh api https://api.github.com/repos/horovod/horovod/commits/${head_sha} -q .commit.message | head -n1)"
            echo "::set-output name=message::${message}"
          fi

      - name: Provide PR meta
        if: github.event_name == 'pull_request'
        run: |
          rm -f pr.json
          echo -n "{" >> pr.json
          echo -n " \"merge_sha\": \"${{ github.sha }}\"," >> pr.json
          echo -n " \"base_sha\": \"${{ github.event.pull_request.base.sha }}\"," >> pr.json
          echo -n " \"head_sha\": \"${{ github.event.pull_request.head.sha }}\" " >> pr.json
          echo -n "}" >> pr.json
          cat pr.json

      - name: Upload PR meta
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: PR Meta
          path: pr.json


  buildkite:
    name: "Build and Test GPU (on Builtkite)"
    needs: [init-workflow]
    runs-on: ubuntu-latest
    if: >
      github.repository == 'horovod/horovod' &&
      needs.init-workflow.outputs.run-at-all == 'true' &&
      needs.init-workflow.outputs.run-builds-and-tests == 'true' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )

    steps:
      - name: Trigger Buildkite Pipeline
        id: build
        uses: EnricoMi/trigger-pipeline-action@master
        env:
          PIPELINE: "horovod/horovod"
          # COMMIT is taken from GITHUB_SHA
          BRANCH: "${{ needs.init-workflow.outputs.buildkite-branch-label }} (GPU NON HEADS)"
          # empty MESSAGE will be filled by Buildkite from commit message
          MESSAGE: "${{ needs.init-workflow.outputs.buildkite-message }}"
          BUILDKITE_API_ACCESS_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
          BUILD_ENV_VARS: "{\"PIPELINE_MODE\": \"GPU NON HEADS\"}"

      - name: Download Buildkite Artifacts
        id: download
        uses: docker://ghcr.io/enricomi/download-buildkite-artifact-action:v1
        with:
          github_token: ${{ github.token }}
          buildkite_token: ${{ secrets.BUILDKITE_TOKEN }}
          buildkite_build_url: ${{ steps.build.outputs.url }}
          ignore_build_states: blocked,canceled,skipped,not_run
          ignore_job_states: timed_out
          output_path: artifacts/Unit Test Results - GPU NON HEADS on Builtkite

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Unit Test Results - GPU NON HEADS on Builtkite
          path: artifacts/Unit Test Results - GPU NON HEADS on Builtkite/**/*.xml

      - name: Check Buildkite job state
        if: >
          always() &&
          steps.download.conclusion == 'success' &&
          steps.download.outputs.build-state != 'passed'
        run: |
          echo "::warning::Buildkite pipeline did not pass: ${{ steps.build.outputs.url }}"
          exit 1

  buildkite-heads:
    name: "Build and Test GPU heads (on Builtkite)"
    needs: [init-workflow]
    runs-on: ubuntu-latest
    if: >
      github.repository == 'horovod/horovod' &&
      needs.init-workflow.outputs.run-at-all == 'true' &&
      needs.init-workflow.outputs.run-builds-and-tests == 'true' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )

    steps:
      - name: Trigger Buildkite Pipeline
        id: build
        uses: EnricoMi/trigger-pipeline-action@master
        env:
          PIPELINE: "horovod/horovod"
          # COMMIT is taken from GITHUB_SHA
          BRANCH: "${{ needs.init-workflow.outputs.buildkite-branch-label }} (GPU HEADS)"
          # empty MESSAGE will be filled by Buildkite from commit message
          MESSAGE: "${{ needs.init-workflow.outputs.buildkite-message }}"
          BUILDKITE_API_ACCESS_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
          BUILD_ENV_VARS: "{\"PIPELINE_MODE\": \"GPU HEADS\"}"

      - name: Download Buildkite Artifacts
        id: download
        uses: docker://ghcr.io/enricomi/download-buildkite-artifact-action:v1
        with:
          github_token: ${{ github.token }}
          buildkite_token: ${{ secrets.BUILDKITE_TOKEN }}
          buildkite_build_url: ${{ steps.build.outputs.url }}
          ignore_build_states: blocked,canceled,skipped,not_run
          ignore_job_states: timed_out
          output_path: artifacts/Unit Test Results - GPU HEADS on Builtkite

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Unit Test Results - GPU HEADS on Builtkite
          path: artifacts/Unit Test Results - GPU HEADS on Builtkite/**/*.xml

      - name: Check Buildkite job state
        if: >
          always() &&
          steps.download.conclusion == 'success' &&
          steps.download.outputs.build-state != 'passed'
        run: |
          echo "::warning::Buildkite pipeline did not pass: ${{ steps.build.outputs.url }}"
          exit 1

  sync-files:
    name: "Sync Files (${{ matrix.name }})"
    needs: [init-workflow]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Docs Summary
            left_file: README.rst
            right_file: docs/summary.rst
            init: sed -i -e s/docs\///g README.rst

          - name: Examples Keras Spark3
            left_file: examples/spark/keras/keras_spark_rossmann_run.py
            right_file: examples/spark/keras/keras_spark3_rossmann.py

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Diffing ${{ matrix.left_file }} with ${{ matrix.right_file }}
        env:
          LEFT: ${{ matrix.left_file }}
          RIGHT: ${{ matrix.right_file }}
          INIT: ${{ matrix.init }}
        run: |
          $INIT

          patch --quiet -p0 $LEFT ${RIGHT}.patch -o ${LEFT}.expected
          if ! diff -q ${LEFT}.expected --label $LEFT $RIGHT
          then
            echo
            echo "::error::Files are out-of-sync: $LEFT vs. $RIGHT"
            echo "Unexpected differences are:"
            diff ${LEFT}.expected --label $LEFT $RIGHT || true

            echo
            echo "Use the following as ${RIGHT}.patch to accept those changes:"
            diff $LEFT $RIGHT || true

            false
          fi
