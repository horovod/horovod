# Do not edit this file! It has been generated by .github/gen-workflow-ci.py

name: CI

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    # only consider push to master and tags
    # otherwise modify job.config.outputs.push
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]

concurrency:
  # github.ref means something like refs/heads/master or refs/tags/v0.22.1 or the branch.
  # This helps to not cancel concurrent runs on master and a tag that share the same commit
  # On master, head_ref is empty, so we use the SHA of the commit, this means
  # individual commits to master will not be cancelled, but tagged
  group: ci-${{ github.ref }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Debug Action
      uses: hmarr/debug-action@v1.0.0

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}

  init-workflow:
    name: "Init Workflow"
    runs-on: ubuntu-latest
    outputs:
      run_at_all: ${{ github.event_name != 'schedule' || github.repository == 'horovod/horovod' }}
      # if we don't get a clear 'false', we fall back to building and testing
      run_builds_and_tests: ${{ steps.tests.outputs.needed != 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Pip install dependencies
        run: pip install -r .github/requirements.txt

      - name: Check ci.yaml is up-to-date
        run: |
          python .github/gen-workflow-ci.py
          if [[ $(git diff .github/workflows/ci.yaml | wc -l) -gt 0 ]]
          then
            echo "::error::Workflow file .github/workflows/ci.yaml is out-dated, please run .github/gen-workflow-ci.py and commit changes"
            exit 1
          fi
        shell: bash

      - name: Check if tests are needed
        id: tests
        env:
          GITHUB_BASE: ${{ github.event.pull_request.base.sha }}
          GITHUB_HEAD: ${{ github.event.pull_request.head.sha }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            changes="$(python .github/get-changed-code-files.py)"
            if [[ -z "$changes" ]]
            then
              echo "No code changes, no need to build and test"
              echo "::set-output name=needed::false"
            else
              echo "Code changes, we need to build and test:"
              echo "$changes"
              echo "::set-output name=needed::true"
            fi
          else
            echo "This is not part of a pull request, we need to build and test"
            echo "::set-output name=needed::true"
          fi

  buildkite:
    name: "Build and Test GPU (on Builtkite)"
    needs: [init-workflow]
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Buildkite Pipeline
        id: build
        uses: EnricoMi/trigger-pipeline-action@master
        env:
          PIPELINE: "horovod/horovod"
          COMMIT: 66ad6d5a3586decdac356e8ec95c204990bbc3d6
          BRANCH: "refs/tags/v0.23.0"
          # empty MESSAGE will be filled by Buildkite
          BUILDKITE_API_ACCESS_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
          BUILD_ENV_VARS: "{\"PIPELINE_MODE\": \"GPU NON HEADS\"}"

      - name: Download Buildkite Artifacts
        id: download
        uses: docker://ghcr.io/enricomi/download-buildkite-artifact-action:v1
        with:
          github_token: ${{ github.token }}
          buildkite_token: ${{ secrets.BUILDKITE_TOKEN }}
          buildkite_build_url: ${{ steps.build.outputs.url }}
          ignore_build_states: blocked,canceled,skipped,not_run
          ignore_job_states: timed_out
          output_path: artifacts/Unit Test Results - GPU NON HEADS on Builtkite

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Unit Test Results - GPU NON HEADS on Builtkite
          path: artifacts/Unit Test Results - GPU NON HEADS on Builtkite/**/*.xml

      - name: Check Buildkite job state
        if: >
          always() &&
          steps.download.conclusion == 'success' &&
          steps.download.outputs.build-state != 'passed'
        run: |
          echo "::warning::Buildkite pipeline did not pass: ${{ steps.build.outputs.url }}"
          exit 1
